// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NatGatewaySpec defines the desired state of NatGateway.
//
// Describes a NAT gateway.
type NATGatewaySpec struct {
	// [Public NAT gateways only] The allocation ID of an Elastic IP address to
	// associate with the NAT gateway. You cannot specify an Elastic IP address
	// with a private NAT gateway. If the Elastic IP address is associated with
	// another resource, you must first disassociate it.
	AllocationID *string `json:"allocationID,omitempty"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 64 ASCII characters.
	ClientToken *string `json:"clientToken,omitempty"`
	// Indicates whether the NAT gateway supports public or private connectivity.
	// The default is public connectivity.
	ConnectivityType *string `json:"connectivityType,omitempty"`
	// The subnet in which to create the NAT gateway.
	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetID"`
	// The tags to assign to the NAT gateway.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
}

// NATGatewayStatus defines the observed state of NATGateway
type NATGatewayStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Information about the NAT gateway.
	// +kubebuilder:validation:Optional
	NATGateway *NATGateway_SDK `json:"natGateway,omitempty"`
}

// NATGateway is the Schema for the NATGateways API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type NATGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATGatewaySpec   `json:"spec,omitempty"`
	Status            NATGatewayStatus `json:"status,omitempty"`
}

// NATGatewayList contains a list of NATGateway
// +kubebuilder:object:root=true
type NATGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATGateway `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NATGateway{}, &NATGatewayList{})
}
