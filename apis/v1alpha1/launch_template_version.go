// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LaunchTemplateVersionSpec defines the desired state of LaunchTemplateVersion.
//
// Describes a launch template version.
type LaunchTemplateVersionSpec struct {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 128 ASCII characters.
	ClientToken *string `json:"clientToken,omitempty"`
	// The information for the launch template.
	// +kubebuilder:validation:Required
	LaunchTemplateData *RequestLaunchTemplateData `json:"launchTemplateData"`
	// The ID of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`
	// The name of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateName *string `json:"launchTemplateName,omitempty"`
	// The version number of the launch template version on which to base the new
	// version. The new version inherits the same launch parameters as the source
	// version, except for parameters that you specify in LaunchTemplateData. Snapshots
	// applied to the block device mapping are ignored when creating a new version
	// unless they are explicitly included.
	SourceVersion *string `json:"sourceVersion,omitempty"`
	// A description for the version of the launch template.
	VersionDescription *string `json:"versionDescription,omitempty"`
}

// LaunchTemplateVersionStatus defines the observed state of LaunchTemplateVersion
type LaunchTemplateVersionStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Information about the launch template version.
	// +kubebuilder:validation:Optional
	LaunchTemplateVersion *LaunchTemplateVersion_SDK `json:"launchTemplateVersion,omitempty"`
	// If the new version of the launch template contains parameters or parameter
	// combinations that are not valid, an error code and an error message are returned
	// for each issue that's found.
	// +kubebuilder:validation:Optional
	Warning *ValidationWarning `json:"warning,omitempty"`
}

// LaunchTemplateVersion is the Schema for the LaunchTemplateVersions API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type LaunchTemplateVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LaunchTemplateVersionSpec   `json:"spec,omitempty"`
	Status            LaunchTemplateVersionStatus `json:"status,omitempty"`
}

// LaunchTemplateVersionList contains a list of LaunchTemplateVersion
// +kubebuilder:object:root=true
type LaunchTemplateVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchTemplateVersion `json:"items"`
}

func init() {
	SchemeBuilder.Register(&LaunchTemplateVersion{}, &LaunchTemplateVersionList{})
}
