// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package vpc_endpoint_service_configuration

import (
	"context"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.VPCEndpointServiceConfiguration{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeVpcEndpointServiceConfigurationsOutput
	resp, err = rm.sdkapi.DescribeVpcEndpointServiceConfigurationsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeVpcEndpointServiceConfigurations", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.ServiceConfigurations {
		if elem.AcceptanceRequired != nil {
			ko.Spec.AcceptanceRequired = elem.AcceptanceRequired
		} else {
			ko.Spec.AcceptanceRequired = nil
		}
		if elem.GatewayLoadBalancerArns != nil {
			f3 := []*string{}
			for _, f3iter := range elem.GatewayLoadBalancerArns {
				var f3elem string
				f3elem = *f3iter
				f3 = append(f3, &f3elem)
			}
			ko.Spec.GatewayLoadBalancerARNs = f3
		} else {
			ko.Spec.GatewayLoadBalancerARNs = nil
		}
		if elem.NetworkLoadBalancerArns != nil {
			f5 := []*string{}
			for _, f5iter := range elem.NetworkLoadBalancerArns {
				var f5elem string
				f5elem = *f5iter
				f5 = append(f5, &f5elem)
			}
			ko.Spec.NetworkLoadBalancerARNs = f5
		} else {
			ko.Spec.NetworkLoadBalancerARNs = nil
		}
		if elem.PrivateDnsName != nil {
			ko.Spec.PrivateDNSName = elem.PrivateDnsName
		} else {
			ko.Spec.PrivateDNSName = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeVpcEndpointServiceConfigurationsInput, error) {
	res := &svcsdk.DescribeVpcEndpointServiceConfigurationsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateVpcEndpointServiceConfigurationOutput
	_ = resp
	resp, err = rm.sdkapi.CreateVpcEndpointServiceConfigurationWithContext(ctx, input)
	if err = rm.addPermissions(desired, resp); err != nil {
		return nil, err
	}
	rm.metrics.RecordAPICall("CREATE", "CreateVpcEndpointServiceConfiguration", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ClientToken != nil {
		ko.Spec.ClientToken = resp.ClientToken
	} else {
		ko.Spec.ClientToken = nil
	}
	if resp.ServiceConfiguration != nil {
		f1 := &svcapitypes.ServiceConfiguration{}
		if resp.ServiceConfiguration.AcceptanceRequired != nil {
			f1.AcceptanceRequired = resp.ServiceConfiguration.AcceptanceRequired
		}
		if resp.ServiceConfiguration.AvailabilityZones != nil {
			f1f1 := []*string{}
			for _, f1f1iter := range resp.ServiceConfiguration.AvailabilityZones {
				var f1f1elem string
				f1f1elem = *f1f1iter
				f1f1 = append(f1f1, &f1f1elem)
			}
			f1.AvailabilityZones = f1f1
		}
		if resp.ServiceConfiguration.BaseEndpointDnsNames != nil {
			f1f2 := []*string{}
			for _, f1f2iter := range resp.ServiceConfiguration.BaseEndpointDnsNames {
				var f1f2elem string
				f1f2elem = *f1f2iter
				f1f2 = append(f1f2, &f1f2elem)
			}
			f1.BaseEndpointDNSNames = f1f2
		}
		if resp.ServiceConfiguration.GatewayLoadBalancerArns != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range resp.ServiceConfiguration.GatewayLoadBalancerArns {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.GatewayLoadBalancerARNs = f1f3
		}
		if resp.ServiceConfiguration.ManagesVpcEndpoints != nil {
			f1.ManagesVPCEndpoints = resp.ServiceConfiguration.ManagesVpcEndpoints
		}
		if resp.ServiceConfiguration.NetworkLoadBalancerArns != nil {
			f1f5 := []*string{}
			for _, f1f5iter := range resp.ServiceConfiguration.NetworkLoadBalancerArns {
				var f1f5elem string
				f1f5elem = *f1f5iter
				f1f5 = append(f1f5, &f1f5elem)
			}
			f1.NetworkLoadBalancerARNs = f1f5
		}
		if resp.ServiceConfiguration.PrivateDnsName != nil {
			f1.PrivateDNSName = resp.ServiceConfiguration.PrivateDnsName
		}
		if resp.ServiceConfiguration.PrivateDnsNameConfiguration != nil {
			f1f7 := &svcapitypes.PrivateDNSNameConfiguration{}
			if resp.ServiceConfiguration.PrivateDnsNameConfiguration.Name != nil {
				f1f7.Name = resp.ServiceConfiguration.PrivateDnsNameConfiguration.Name
			}
			if resp.ServiceConfiguration.PrivateDnsNameConfiguration.State != nil {
				f1f7.State = resp.ServiceConfiguration.PrivateDnsNameConfiguration.State
			}
			if resp.ServiceConfiguration.PrivateDnsNameConfiguration.Type != nil {
				f1f7.Type = resp.ServiceConfiguration.PrivateDnsNameConfiguration.Type
			}
			if resp.ServiceConfiguration.PrivateDnsNameConfiguration.Value != nil {
				f1f7.Value = resp.ServiceConfiguration.PrivateDnsNameConfiguration.Value
			}
			f1.PrivateDNSNameConfiguration = f1f7
		}
		if resp.ServiceConfiguration.ServiceId != nil {
			f1.ServiceID = resp.ServiceConfiguration.ServiceId
		}
		if resp.ServiceConfiguration.ServiceName != nil {
			f1.ServiceName = resp.ServiceConfiguration.ServiceName
		}
		if resp.ServiceConfiguration.ServiceState != nil {
			f1.ServiceState = resp.ServiceConfiguration.ServiceState
		}
		if resp.ServiceConfiguration.ServiceType != nil {
			f1f11 := []*svcapitypes.ServiceTypeDetail{}
			for _, f1f11iter := range resp.ServiceConfiguration.ServiceType {
				f1f11elem := &svcapitypes.ServiceTypeDetail{}
				if f1f11iter.ServiceType != nil {
					f1f11elem.ServiceType = f1f11iter.ServiceType
				}
				f1f11 = append(f1f11, f1f11elem)
			}
			f1.ServiceType = f1f11
		}
		if resp.ServiceConfiguration.Tags != nil {
			f1f12 := []*svcapitypes.Tag{}
			for _, f1f12iter := range resp.ServiceConfiguration.Tags {
				f1f12elem := &svcapitypes.Tag{}
				if f1f12iter.Key != nil {
					f1f12elem.Key = f1f12iter.Key
				}
				if f1f12iter.Value != nil {
					f1f12elem.Value = f1f12iter.Value
				}
				f1f12 = append(f1f12, f1f12elem)
			}
			f1.Tags = f1f12
		}
		ko.Status.ServiceConfiguration = f1
	} else {
		ko.Status.ServiceConfiguration = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateVpcEndpointServiceConfigurationInput, error) {
	res := &svcsdk.CreateVpcEndpointServiceConfigurationInput{}

	if r.ko.Spec.AcceptanceRequired != nil {
		res.SetAcceptanceRequired(*r.ko.Spec.AcceptanceRequired)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.GatewayLoadBalancerARNs != nil {
		f2 := []*string{}
		for _, f2iter := range r.ko.Spec.GatewayLoadBalancerARNs {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetGatewayLoadBalancerArns(f2)
	}
	if r.ko.Spec.NetworkLoadBalancerARNs != nil {
		f3 := []*string{}
		for _, f3iter := range r.ko.Spec.NetworkLoadBalancerARNs {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetNetworkLoadBalancerArns(f3)
	}
	if r.ko.Spec.PrivateDNSName != nil {
		res.SetPrivateDnsName(*r.ko.Spec.PrivateDNSName)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f5 := []*svcsdk.TagSpecification{}
		for _, f5iter := range r.ko.Spec.TagSpecifications {
			f5elem := &svcsdk.TagSpecification{}
			if f5iter.ResourceType != nil {
				f5elem.SetResourceType(*f5iter.ResourceType)
			}
			if f5iter.Tags != nil {
				f5elemf1 := []*svcsdk.Tag{}
				for _, f5elemf1iter := range f5iter.Tags {
					f5elemf1elem := &svcsdk.Tag{}
					if f5elemf1iter.Key != nil {
						f5elemf1elem.SetKey(*f5elemf1iter.Key)
					}
					if f5elemf1iter.Value != nil {
						f5elemf1elem.SetValue(*f5elemf1iter.Value)
					}
					f5elemf1 = append(f5elemf1, f5elemf1elem)
				}
				f5elem.SetTags(f5elemf1)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTagSpecifications(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer exit(err)
	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.ModifyVpcEndpointServiceConfigurationOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyVpcEndpointServiceConfigurationWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyVpcEndpointServiceConfiguration", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyVpcEndpointServiceConfigurationInput, error) {
	res := &svcsdk.ModifyVpcEndpointServiceConfigurationInput{}

	if r.ko.Spec.AcceptanceRequired != nil {
		res.SetAcceptanceRequired(*r.ko.Spec.AcceptanceRequired)
	}
	if r.ko.Spec.PrivateDNSName != nil {
		res.SetPrivateDnsName(*r.ko.Spec.PrivateDNSName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	// TODO(jaypipes): Figure this out...
	return nil, nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.VPCEndpointServiceConfiguration,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
