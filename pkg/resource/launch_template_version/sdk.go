// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package launch_template_version

import (
	"context"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.LaunchTemplateVersion{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeLaunchTemplateVersionsOutput
	resp, err = rm.sdkapi.DescribeLaunchTemplateVersionsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeLaunchTemplateVersions", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.LaunchTemplateVersions {
		if elem.LaunchTemplateData != nil {
			f3 := &svcapitypes.RequestLaunchTemplateData{}
			if elem.LaunchTemplateData.BlockDeviceMappings != nil {
				f3f0 := []*svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
				for _, f3f0iter := range elem.LaunchTemplateData.BlockDeviceMappings {
					f3f0elem := &svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
					if f3f0iter.DeviceName != nil {
						f3f0elem.DeviceName = f3f0iter.DeviceName
					}
					if f3f0iter.Ebs != nil {
						f3f0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDeviceRequest{}
						if f3f0iter.Ebs.DeleteOnTermination != nil {
							f3f0elemf1.DeleteOnTermination = f3f0iter.Ebs.DeleteOnTermination
						}
						if f3f0iter.Ebs.Encrypted != nil {
							f3f0elemf1.Encrypted = f3f0iter.Ebs.Encrypted
						}
						if f3f0iter.Ebs.Iops != nil {
							f3f0elemf1.IOPS = f3f0iter.Ebs.Iops
						}
						if f3f0iter.Ebs.KmsKeyId != nil {
							f3f0elemf1.KMSKeyID = f3f0iter.Ebs.KmsKeyId
						}
						if f3f0iter.Ebs.SnapshotId != nil {
							f3f0elemf1.SnapshotID = f3f0iter.Ebs.SnapshotId
						}
						if f3f0iter.Ebs.Throughput != nil {
							f3f0elemf1.Throughput = f3f0iter.Ebs.Throughput
						}
						if f3f0iter.Ebs.VolumeSize != nil {
							f3f0elemf1.VolumeSize = f3f0iter.Ebs.VolumeSize
						}
						if f3f0iter.Ebs.VolumeType != nil {
							f3f0elemf1.VolumeType = f3f0iter.Ebs.VolumeType
						}
						f3f0elem.EBS = f3f0elemf1
					}
					if f3f0iter.NoDevice != nil {
						f3f0elem.NoDevice = f3f0iter.NoDevice
					}
					if f3f0iter.VirtualName != nil {
						f3f0elem.VirtualName = f3f0iter.VirtualName
					}
					f3f0 = append(f3f0, f3f0elem)
				}
				f3.BlockDeviceMappings = f3f0
			}
			if elem.LaunchTemplateData.CapacityReservationSpecification != nil {
				f3f1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationRequest{}
				if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f3f1.CapacityReservationPreference = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference
				}
				if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f3f1f1 := &svcapitypes.CapacityReservationTarget{}
					if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f3f1f1.CapacityReservationID = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f3f1f1.CapacityReservationResourceGroupARN = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f3f1.CapacityReservationTarget = f3f1f1
				}
				f3.CapacityReservationSpecification = f3f1
			}
			if elem.LaunchTemplateData.CpuOptions != nil {
				f3f2 := &svcapitypes.LaunchTemplateCPUOptionsRequest{}
				if elem.LaunchTemplateData.CpuOptions.CoreCount != nil {
					f3f2.CoreCount = elem.LaunchTemplateData.CpuOptions.CoreCount
				}
				if elem.LaunchTemplateData.CpuOptions.ThreadsPerCore != nil {
					f3f2.ThreadsPerCore = elem.LaunchTemplateData.CpuOptions.ThreadsPerCore
				}
				f3.CPUOptions = f3f2
			}
			if elem.LaunchTemplateData.CreditSpecification != nil {
				f3f3 := &svcapitypes.CreditSpecificationRequest{}
				if elem.LaunchTemplateData.CreditSpecification.CpuCredits != nil {
					f3f3.CPUCredits = elem.LaunchTemplateData.CreditSpecification.CpuCredits
				}
				f3.CreditSpecification = f3f3
			}
			if elem.LaunchTemplateData.DisableApiTermination != nil {
				f3.DisableAPITermination = elem.LaunchTemplateData.DisableApiTermination
			}
			if elem.LaunchTemplateData.EbsOptimized != nil {
				f3.EBSOptimized = elem.LaunchTemplateData.EbsOptimized
			}
			if elem.LaunchTemplateData.ElasticGpuSpecifications != nil {
				f3f6 := []*svcapitypes.ElasticGPUSpecification{}
				for _, f3f6iter := range elem.LaunchTemplateData.ElasticGpuSpecifications {
					f3f6elem := &svcapitypes.ElasticGPUSpecification{}
					if f3f6iter.Type != nil {
						f3f6elem.Type = f3f6iter.Type
					}
					f3f6 = append(f3f6, f3f6elem)
				}
				f3.ElasticGPUSpecifications = f3f6
			}
			if elem.LaunchTemplateData.ElasticInferenceAccelerators != nil {
				f3f7 := []*svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
				for _, f3f7iter := range elem.LaunchTemplateData.ElasticInferenceAccelerators {
					f3f7elem := &svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
					if f3f7iter.Count != nil {
						f3f7elem.Count = f3f7iter.Count
					}
					if f3f7iter.Type != nil {
						f3f7elem.Type = f3f7iter.Type
					}
					f3f7 = append(f3f7, f3f7elem)
				}
				f3.ElasticInferenceAccelerators = f3f7
			}
			if elem.LaunchTemplateData.EnclaveOptions != nil {
				f3f8 := &svcapitypes.LaunchTemplateEnclaveOptionsRequest{}
				if elem.LaunchTemplateData.EnclaveOptions.Enabled != nil {
					f3f8.Enabled = elem.LaunchTemplateData.EnclaveOptions.Enabled
				}
				f3.EnclaveOptions = f3f8
			}
			if elem.LaunchTemplateData.HibernationOptions != nil {
				f3f9 := &svcapitypes.LaunchTemplateHibernationOptionsRequest{}
				if elem.LaunchTemplateData.HibernationOptions.Configured != nil {
					f3f9.Configured = elem.LaunchTemplateData.HibernationOptions.Configured
				}
				f3.HibernationOptions = f3f9
			}
			if elem.LaunchTemplateData.IamInstanceProfile != nil {
				f3f10 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecificationRequest{}
				if elem.LaunchTemplateData.IamInstanceProfile.Arn != nil {
					f3f10.ARN = elem.LaunchTemplateData.IamInstanceProfile.Arn
				}
				if elem.LaunchTemplateData.IamInstanceProfile.Name != nil {
					f3f10.Name = elem.LaunchTemplateData.IamInstanceProfile.Name
				}
				f3.IAMInstanceProfile = f3f10
			}
			if elem.LaunchTemplateData.ImageId != nil {
				f3.ImageID = elem.LaunchTemplateData.ImageId
			}
			if elem.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
				f3.InstanceInitiatedShutdownBehavior = elem.LaunchTemplateData.InstanceInitiatedShutdownBehavior
			}
			if elem.LaunchTemplateData.InstanceMarketOptions != nil {
				f3f13 := &svcapitypes.LaunchTemplateInstanceMarketOptionsRequest{}
				if elem.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
					f3f13.MarketType = elem.LaunchTemplateData.InstanceMarketOptions.MarketType
				}
				if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
					f3f13f1 := &svcapitypes.LaunchTemplateSpotMarketOptionsRequest{}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
						f3f13f1.BlockDurationMinutes = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
						f3f13f1.InstanceInterruptionBehavior = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
						f3f13f1.MaxPrice = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
						f3f13f1.SpotInstanceType = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
						f3f13f1.ValidUntil = &metav1.Time{*elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil}
					}
					f3f13.SpotOptions = f3f13f1
				}
				f3.InstanceMarketOptions = f3f13
			}
			if elem.LaunchTemplateData.InstanceRequirements != nil {
				f3f14 := &svcapitypes.InstanceRequirementsRequest{}
				if elem.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
					f3f14f0 := &svcapitypes.AcceleratorCountRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
						f3f14f0.Max = elem.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
						f3f14f0.Min = elem.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min
					}
					f3f14.AcceleratorCount = f3f14f0
				}
				if elem.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
					f3f14f1 := []*string{}
					for _, f3f14f1iter := range elem.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
						var f3f14f1elem string
						f3f14f1elem = *f3f14f1iter
						f3f14f1 = append(f3f14f1, &f3f14f1elem)
					}
					f3f14.AcceleratorManufacturers = f3f14f1
				}
				if elem.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
					f3f14f2 := []*string{}
					for _, f3f14f2iter := range elem.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
						var f3f14f2elem string
						f3f14f2elem = *f3f14f2iter
						f3f14f2 = append(f3f14f2, &f3f14f2elem)
					}
					f3f14.AcceleratorNames = f3f14f2
				}
				if elem.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
					f3f14f3 := &svcapitypes.AcceleratorTotalMemoryMiBRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
						f3f14f3.Max = elem.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
						f3f14f3.Min = elem.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
					}
					f3f14.AcceleratorTotalMemoryMiB = f3f14f3
				}
				if elem.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
					f3f14f4 := []*string{}
					for _, f3f14f4iter := range elem.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
						var f3f14f4elem string
						f3f14f4elem = *f3f14f4iter
						f3f14f4 = append(f3f14f4, &f3f14f4elem)
					}
					f3f14.AcceleratorTypes = f3f14f4
				}
				if elem.LaunchTemplateData.InstanceRequirements.BareMetal != nil {
					f3f14.BareMetal = elem.LaunchTemplateData.InstanceRequirements.BareMetal
				}
				if elem.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
					f3f14f6 := &svcapitypes.BaselineEBSBandwidthMbpsRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
						f3f14f6.Max = elem.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
						f3f14f6.Min = elem.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min
					}
					f3f14.BaselineEBSBandwidthMbps = f3f14f6
				}
				if elem.LaunchTemplateData.InstanceRequirements.BurstablePerformance != nil {
					f3f14.BurstablePerformance = elem.LaunchTemplateData.InstanceRequirements.BurstablePerformance
				}
				if elem.LaunchTemplateData.InstanceRequirements.CpuManufacturers != nil {
					f3f14f8 := []*string{}
					for _, f3f14f8iter := range elem.LaunchTemplateData.InstanceRequirements.CpuManufacturers {
						var f3f14f8elem string
						f3f14f8elem = *f3f14f8iter
						f3f14f8 = append(f3f14f8, &f3f14f8elem)
					}
					f3f14.CPUManufacturers = f3f14f8
				}
				if elem.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
					f3f14f9 := []*string{}
					for _, f3f14f9iter := range elem.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes {
						var f3f14f9elem string
						f3f14f9elem = *f3f14f9iter
						f3f14f9 = append(f3f14f9, &f3f14f9elem)
					}
					f3f14.ExcludedInstanceTypes = f3f14f9
				}
				if elem.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
					f3f14f10 := []*string{}
					for _, f3f14f10iter := range elem.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
						var f3f14f10elem string
						f3f14f10elem = *f3f14f10iter
						f3f14f10 = append(f3f14f10, &f3f14f10elem)
					}
					f3f14.InstanceGenerations = f3f14f10
				}
				if elem.LaunchTemplateData.InstanceRequirements.LocalStorage != nil {
					f3f14.LocalStorage = elem.LaunchTemplateData.InstanceRequirements.LocalStorage
				}
				if elem.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
					f3f14f12 := []*string{}
					for _, f3f14f12iter := range elem.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
						var f3f14f12elem string
						f3f14f12elem = *f3f14f12iter
						f3f14f12 = append(f3f14f12, &f3f14f12elem)
					}
					f3f14.LocalStorageTypes = f3f14f12
				}
				if elem.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu != nil {
					f3f14f13 := &svcapitypes.MemoryGiBPerVCPURequest{}
					if elem.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
						f3f14f13.Max = elem.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
						f3f14f13.Min = elem.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min
					}
					f3f14.MemoryGiBPerVCPU = f3f14f13
				}
				if elem.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
					f3f14f14 := &svcapitypes.MemoryMiBRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
						f3f14f14.Max = elem.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
						f3f14f14.Min = elem.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min
					}
					f3f14.MemoryMiB = f3f14f14
				}
				if elem.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
					f3f14f15 := &svcapitypes.NetworkInterfaceCountRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
						f3f14f15.Max = elem.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
						f3f14f15.Min = elem.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min
					}
					f3f14.NetworkInterfaceCount = f3f14f15
				}
				if elem.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
					f3f14.OnDemandMaxPricePercentageOverLowestPrice = elem.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
				}
				if elem.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
					f3f14.RequireHibernateSupport = elem.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport
				}
				if elem.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
					f3f14.SpotMaxPricePercentageOverLowestPrice = elem.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
				}
				if elem.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
					f3f14f19 := &svcapitypes.TotalLocalStorageGBRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
						f3f14f19.Max = elem.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
						f3f14f19.Min = elem.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min
					}
					f3f14.TotalLocalStorageGB = f3f14f19
				}
				if elem.LaunchTemplateData.InstanceRequirements.VCpuCount != nil {
					f3f14f20 := &svcapitypes.VCPUCountRangeRequest{}
					if elem.LaunchTemplateData.InstanceRequirements.VCpuCount.Max != nil {
						f3f14f20.Max = elem.LaunchTemplateData.InstanceRequirements.VCpuCount.Max
					}
					if elem.LaunchTemplateData.InstanceRequirements.VCpuCount.Min != nil {
						f3f14f20.Min = elem.LaunchTemplateData.InstanceRequirements.VCpuCount.Min
					}
					f3f14.VCPUCount = f3f14f20
				}
				f3.InstanceRequirements = f3f14
			}
			if elem.LaunchTemplateData.InstanceType != nil {
				f3.InstanceType = elem.LaunchTemplateData.InstanceType
			}
			if elem.LaunchTemplateData.KernelId != nil {
				f3.KernelID = elem.LaunchTemplateData.KernelId
			}
			if elem.LaunchTemplateData.KeyName != nil {
				f3.KeyName = elem.LaunchTemplateData.KeyName
			}
			if elem.LaunchTemplateData.LicenseSpecifications != nil {
				f3f18 := []*svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
				for _, f3f18iter := range elem.LaunchTemplateData.LicenseSpecifications {
					f3f18elem := &svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
					if f3f18iter.LicenseConfigurationArn != nil {
						f3f18elem.LicenseConfigurationARN = f3f18iter.LicenseConfigurationArn
					}
					f3f18 = append(f3f18, f3f18elem)
				}
				f3.LicenseSpecifications = f3f18
			}
			if elem.LaunchTemplateData.MetadataOptions != nil {
				f3f19 := &svcapitypes.LaunchTemplateInstanceMetadataOptionsRequest{}
				if elem.LaunchTemplateData.MetadataOptions.HttpEndpoint != nil {
					f3f19.HTTPEndpoint = elem.LaunchTemplateData.MetadataOptions.HttpEndpoint
				}
				if elem.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6 != nil {
					f3f19.HTTPProtocolIPv6 = elem.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6
				}
				if elem.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit != nil {
					f3f19.HTTPPutResponseHopLimit = elem.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit
				}
				if elem.LaunchTemplateData.MetadataOptions.HttpTokens != nil {
					f3f19.HTTPTokens = elem.LaunchTemplateData.MetadataOptions.HttpTokens
				}
				f3.MetadataOptions = f3f19
			}
			if elem.LaunchTemplateData.Monitoring != nil {
				f3f20 := &svcapitypes.LaunchTemplatesMonitoringRequest{}
				if elem.LaunchTemplateData.Monitoring.Enabled != nil {
					f3f20.Enabled = elem.LaunchTemplateData.Monitoring.Enabled
				}
				f3.Monitoring = f3f20
			}
			if elem.LaunchTemplateData.NetworkInterfaces != nil {
				f3f21 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				for _, f3f21iter := range elem.LaunchTemplateData.NetworkInterfaces {
					f3f21elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
					if f3f21iter.AssociateCarrierIpAddress != nil {
						f3f21elem.AssociateCarrierIPAddress = f3f21iter.AssociateCarrierIpAddress
					}
					if f3f21iter.AssociatePublicIpAddress != nil {
						f3f21elem.AssociatePublicIPAddress = f3f21iter.AssociatePublicIpAddress
					}
					if f3f21iter.DeleteOnTermination != nil {
						f3f21elem.DeleteOnTermination = f3f21iter.DeleteOnTermination
					}
					if f3f21iter.Description != nil {
						f3f21elem.Description = f3f21iter.Description
					}
					if f3f21iter.DeviceIndex != nil {
						f3f21elem.DeviceIndex = f3f21iter.DeviceIndex
					}
					if f3f21iter.Groups != nil {
						f3f21elemf5 := []*string{}
						for _, f3f21elemf5iter := range f3f21iter.Groups {
							var f3f21elemf5elem string
							f3f21elemf5elem = *f3f21elemf5iter
							f3f21elemf5 = append(f3f21elemf5, &f3f21elemf5elem)
						}
						f3f21elem.Groups = f3f21elemf5
					}
					if f3f21iter.InterfaceType != nil {
						f3f21elem.InterfaceType = f3f21iter.InterfaceType
					}
					if f3f21iter.Ipv4PrefixCount != nil {
						f3f21elem.IPv4PrefixCount = f3f21iter.Ipv4PrefixCount
					}
					if f3f21iter.Ipv4Prefixes != nil {
						f3f21elemf8 := []*svcapitypes.IPv4PrefixSpecificationRequest{}
						for _, f3f21elemf8iter := range f3f21iter.Ipv4Prefixes {
							f3f21elemf8elem := &svcapitypes.IPv4PrefixSpecificationRequest{}
							if f3f21elemf8iter.Ipv4Prefix != nil {
								f3f21elemf8elem.IPv4Prefix = f3f21elemf8iter.Ipv4Prefix
							}
							f3f21elemf8 = append(f3f21elemf8, f3f21elemf8elem)
						}
						f3f21elem.IPv4Prefixes = f3f21elemf8
					}
					if f3f21iter.Ipv6AddressCount != nil {
						f3f21elem.IPv6AddressCount = f3f21iter.Ipv6AddressCount
					}
					if f3f21iter.Ipv6Addresses != nil {
						f3f21elemf10 := []*svcapitypes.InstanceIPv6AddressRequest{}
						for _, f3f21elemf10iter := range f3f21iter.Ipv6Addresses {
							f3f21elemf10elem := &svcapitypes.InstanceIPv6AddressRequest{}
							if f3f21elemf10iter.Ipv6Address != nil {
								f3f21elemf10elem.IPv6Address = f3f21elemf10iter.Ipv6Address
							}
							f3f21elemf10 = append(f3f21elemf10, f3f21elemf10elem)
						}
						f3f21elem.IPv6Addresses = f3f21elemf10
					}
					if f3f21iter.Ipv6PrefixCount != nil {
						f3f21elem.IPv6PrefixCount = f3f21iter.Ipv6PrefixCount
					}
					if f3f21iter.Ipv6Prefixes != nil {
						f3f21elemf12 := []*svcapitypes.IPv6PrefixSpecificationRequest{}
						for _, f3f21elemf12iter := range f3f21iter.Ipv6Prefixes {
							f3f21elemf12elem := &svcapitypes.IPv6PrefixSpecificationRequest{}
							if f3f21elemf12iter.Ipv6Prefix != nil {
								f3f21elemf12elem.IPv6Prefix = f3f21elemf12iter.Ipv6Prefix
							}
							f3f21elemf12 = append(f3f21elemf12, f3f21elemf12elem)
						}
						f3f21elem.IPv6Prefixes = f3f21elemf12
					}
					if f3f21iter.NetworkCardIndex != nil {
						f3f21elem.NetworkCardIndex = f3f21iter.NetworkCardIndex
					}
					if f3f21iter.NetworkInterfaceId != nil {
						f3f21elem.NetworkInterfaceID = f3f21iter.NetworkInterfaceId
					}
					if f3f21iter.PrivateIpAddress != nil {
						f3f21elem.PrivateIPAddress = f3f21iter.PrivateIpAddress
					}
					if f3f21iter.PrivateIpAddresses != nil {
						f3f21elemf16 := []*svcapitypes.PrivateIPAddressSpecification{}
						for _, f3f21elemf16iter := range f3f21iter.PrivateIpAddresses {
							f3f21elemf16elem := &svcapitypes.PrivateIPAddressSpecification{}
							if f3f21elemf16iter.Primary != nil {
								f3f21elemf16elem.Primary = f3f21elemf16iter.Primary
							}
							if f3f21elemf16iter.PrivateIpAddress != nil {
								f3f21elemf16elem.PrivateIPAddress = f3f21elemf16iter.PrivateIpAddress
							}
							f3f21elemf16 = append(f3f21elemf16, f3f21elemf16elem)
						}
						f3f21elem.PrivateIPAddresses = f3f21elemf16
					}
					if f3f21iter.SecondaryPrivateIpAddressCount != nil {
						f3f21elem.SecondaryPrivateIPAddressCount = f3f21iter.SecondaryPrivateIpAddressCount
					}
					if f3f21iter.SubnetId != nil {
						f3f21elem.SubnetID = f3f21iter.SubnetId
					}
					f3f21 = append(f3f21, f3f21elem)
				}
				f3.NetworkInterfaces = f3f21
			}
			if elem.LaunchTemplateData.Placement != nil {
				f3f22 := &svcapitypes.LaunchTemplatePlacementRequest{}
				if elem.LaunchTemplateData.Placement.Affinity != nil {
					f3f22.Affinity = elem.LaunchTemplateData.Placement.Affinity
				}
				if elem.LaunchTemplateData.Placement.AvailabilityZone != nil {
					f3f22.AvailabilityZone = elem.LaunchTemplateData.Placement.AvailabilityZone
				}
				if elem.LaunchTemplateData.Placement.GroupName != nil {
					f3f22.GroupName = elem.LaunchTemplateData.Placement.GroupName
				}
				if elem.LaunchTemplateData.Placement.HostId != nil {
					f3f22.HostID = elem.LaunchTemplateData.Placement.HostId
				}
				if elem.LaunchTemplateData.Placement.HostResourceGroupArn != nil {
					f3f22.HostResourceGroupARN = elem.LaunchTemplateData.Placement.HostResourceGroupArn
				}
				if elem.LaunchTemplateData.Placement.PartitionNumber != nil {
					f3f22.PartitionNumber = elem.LaunchTemplateData.Placement.PartitionNumber
				}
				if elem.LaunchTemplateData.Placement.SpreadDomain != nil {
					f3f22.SpreadDomain = elem.LaunchTemplateData.Placement.SpreadDomain
				}
				if elem.LaunchTemplateData.Placement.Tenancy != nil {
					f3f22.Tenancy = elem.LaunchTemplateData.Placement.Tenancy
				}
				f3.Placement = f3f22
			}
			if elem.LaunchTemplateData.RamDiskId != nil {
				f3.RamDiskID = elem.LaunchTemplateData.RamDiskId
			}
			if elem.LaunchTemplateData.SecurityGroupIds != nil {
				f3f24 := []*string{}
				for _, f3f24iter := range elem.LaunchTemplateData.SecurityGroupIds {
					var f3f24elem string
					f3f24elem = *f3f24iter
					f3f24 = append(f3f24, &f3f24elem)
				}
				f3.SecurityGroupIDs = f3f24
			}
			if elem.LaunchTemplateData.SecurityGroups != nil {
				f3f25 := []*string{}
				for _, f3f25iter := range elem.LaunchTemplateData.SecurityGroups {
					var f3f25elem string
					f3f25elem = *f3f25iter
					f3f25 = append(f3f25, &f3f25elem)
				}
				f3.SecurityGroups = f3f25
			}
			if elem.LaunchTemplateData.TagSpecifications != nil {
				f3f26 := []*svcapitypes.LaunchTemplateTagSpecificationRequest{}
				for _, f3f26iter := range elem.LaunchTemplateData.TagSpecifications {
					f3f26elem := &svcapitypes.LaunchTemplateTagSpecificationRequest{}
					if f3f26iter.ResourceType != nil {
						f3f26elem.ResourceType = f3f26iter.ResourceType
					}
					if f3f26iter.Tags != nil {
						f3f26elemf1 := []*svcapitypes.Tag{}
						for _, f3f26elemf1iter := range f3f26iter.Tags {
							f3f26elemf1elem := &svcapitypes.Tag{}
							if f3f26elemf1iter.Key != nil {
								f3f26elemf1elem.Key = f3f26elemf1iter.Key
							}
							if f3f26elemf1iter.Value != nil {
								f3f26elemf1elem.Value = f3f26elemf1iter.Value
							}
							f3f26elemf1 = append(f3f26elemf1, f3f26elemf1elem)
						}
						f3f26elem.Tags = f3f26elemf1
					}
					f3f26 = append(f3f26, f3f26elem)
				}
				f3.TagSpecifications = f3f26
			}
			if elem.LaunchTemplateData.UserData != nil {
				f3.UserData = elem.LaunchTemplateData.UserData
			}
			ko.Spec.LaunchTemplateData = f3
		} else {
			ko.Spec.LaunchTemplateData = nil
		}
		if elem.LaunchTemplateId != nil {
			ko.Spec.LaunchTemplateID = elem.LaunchTemplateId
		} else {
			ko.Spec.LaunchTemplateID = nil
		}
		if elem.LaunchTemplateName != nil {
			ko.Spec.LaunchTemplateName = elem.LaunchTemplateName
		} else {
			ko.Spec.LaunchTemplateName = nil
		}
		if elem.VersionDescription != nil {
			ko.Spec.VersionDescription = elem.VersionDescription
		} else {
			ko.Spec.VersionDescription = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeLaunchTemplateVersionsInput, error) {
	res := &svcsdk.DescribeLaunchTemplateVersionsInput{}

	if r.ko.Spec.LaunchTemplateID != nil {
		res.SetLaunchTemplateId(*r.ko.Spec.LaunchTemplateID)
	}
	if r.ko.Spec.LaunchTemplateName != nil {
		res.SetLaunchTemplateName(*r.ko.Spec.LaunchTemplateName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateLaunchTemplateVersionOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLaunchTemplateVersionWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateLaunchTemplateVersion", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.LaunchTemplateVersion != nil {
		f0 := &svcapitypes.LaunchTemplateVersion_SDK{}
		if resp.LaunchTemplateVersion.CreateTime != nil {
			f0.CreateTime = &metav1.Time{*resp.LaunchTemplateVersion.CreateTime}
		}
		if resp.LaunchTemplateVersion.CreatedBy != nil {
			f0.CreatedBy = resp.LaunchTemplateVersion.CreatedBy
		}
		if resp.LaunchTemplateVersion.DefaultVersion != nil {
			f0.DefaultVersion = resp.LaunchTemplateVersion.DefaultVersion
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData != nil {
			f0f3 := &svcapitypes.ResponseLaunchTemplateData{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings != nil {
				f0f3f0 := []*svcapitypes.LaunchTemplateBlockDeviceMapping{}
				for _, f0f3f0iter := range resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings {
					f0f3f0elem := &svcapitypes.LaunchTemplateBlockDeviceMapping{}
					if f0f3f0iter.DeviceName != nil {
						f0f3f0elem.DeviceName = f0f3f0iter.DeviceName
					}
					if f0f3f0iter.Ebs != nil {
						f0f3f0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDevice{}
						if f0f3f0iter.Ebs.DeleteOnTermination != nil {
							f0f3f0elemf1.DeleteOnTermination = f0f3f0iter.Ebs.DeleteOnTermination
						}
						if f0f3f0iter.Ebs.Encrypted != nil {
							f0f3f0elemf1.Encrypted = f0f3f0iter.Ebs.Encrypted
						}
						if f0f3f0iter.Ebs.Iops != nil {
							f0f3f0elemf1.IOPS = f0f3f0iter.Ebs.Iops
						}
						if f0f3f0iter.Ebs.KmsKeyId != nil {
							f0f3f0elemf1.KMSKeyID = f0f3f0iter.Ebs.KmsKeyId
						}
						if f0f3f0iter.Ebs.SnapshotId != nil {
							f0f3f0elemf1.SnapshotID = f0f3f0iter.Ebs.SnapshotId
						}
						if f0f3f0iter.Ebs.Throughput != nil {
							f0f3f0elemf1.Throughput = f0f3f0iter.Ebs.Throughput
						}
						if f0f3f0iter.Ebs.VolumeSize != nil {
							f0f3f0elemf1.VolumeSize = f0f3f0iter.Ebs.VolumeSize
						}
						if f0f3f0iter.Ebs.VolumeType != nil {
							f0f3f0elemf1.VolumeType = f0f3f0iter.Ebs.VolumeType
						}
						f0f3f0elem.EBS = f0f3f0elemf1
					}
					if f0f3f0iter.NoDevice != nil {
						f0f3f0elem.NoDevice = f0f3f0iter.NoDevice
					}
					if f0f3f0iter.VirtualName != nil {
						f0f3f0elem.VirtualName = f0f3f0iter.VirtualName
					}
					f0f3f0 = append(f0f3f0, f0f3f0elem)
				}
				f0f3.BlockDeviceMappings = f0f3f0
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification != nil {
				f0f3f1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationResponse{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f0f3f1.CapacityReservationPreference = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f0f3f1f1 := &svcapitypes.CapacityReservationTargetResponse{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f0f3f1f1.CapacityReservationID = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f0f3f1f1.CapacityReservationResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f0f3f1.CapacityReservationTarget = f0f3f1f1
				}
				f0f3.CapacityReservationSpecification = f0f3f1
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions != nil {
				f0f3f2 := &svcapitypes.LaunchTemplateCPUOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount != nil {
					f0f3f2.CoreCount = resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore != nil {
					f0f3f2.ThreadsPerCore = resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore
				}
				f0f3.CPUOptions = f0f3f2
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification != nil {
				f0f3f3 := &svcapitypes.CreditSpecification{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits != nil {
					f0f3f3.CPUCredits = resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits
				}
				f0f3.CreditSpecification = f0f3f3
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination != nil {
				f0f3.DisableAPITermination = resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized != nil {
				f0f3.EBSOptimized = resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications != nil {
				f0f3f6 := []*svcapitypes.ElasticGPUSpecificationResponse{}
				for _, f0f3f6iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications {
					f0f3f6elem := &svcapitypes.ElasticGPUSpecificationResponse{}
					if f0f3f6iter.Type != nil {
						f0f3f6elem.Type = f0f3f6iter.Type
					}
					f0f3f6 = append(f0f3f6, f0f3f6elem)
				}
				f0f3.ElasticGPUSpecifications = f0f3f6
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators != nil {
				f0f3f7 := []*svcapitypes.LaunchTemplateElasticInferenceAcceleratorResponse{}
				for _, f0f3f7iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators {
					f0f3f7elem := &svcapitypes.LaunchTemplateElasticInferenceAcceleratorResponse{}
					if f0f3f7iter.Count != nil {
						f0f3f7elem.Count = f0f3f7iter.Count
					}
					if f0f3f7iter.Type != nil {
						f0f3f7elem.Type = f0f3f7iter.Type
					}
					f0f3f7 = append(f0f3f7, f0f3f7elem)
				}
				f0f3.ElasticInferenceAccelerators = f0f3f7
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions != nil {
				f0f3f8 := &svcapitypes.LaunchTemplateEnclaveOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled != nil {
					f0f3f8.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled
				}
				f0f3.EnclaveOptions = f0f3f8
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions != nil {
				f0f3f9 := &svcapitypes.LaunchTemplateHibernationOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured != nil {
					f0f3f9.Configured = resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured
				}
				f0f3.HibernationOptions = f0f3f9
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile != nil {
				f0f3f10 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecification{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn != nil {
					f0f3f10.ARN = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name != nil {
					f0f3f10.Name = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name
				}
				f0f3.IAMInstanceProfile = f0f3f10
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ImageId != nil {
				f0f3.ImageID = resp.LaunchTemplateVersion.LaunchTemplateData.ImageId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
				f0f3.InstanceInitiatedShutdownBehavior = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions != nil {
				f0f3f13 := &svcapitypes.LaunchTemplateInstanceMarketOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
					f0f3f13.MarketType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
					f0f3f13f1 := &svcapitypes.LaunchTemplateSpotMarketOptions{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
						f0f3f13f1.BlockDurationMinutes = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
						f0f3f13f1.InstanceInterruptionBehavior = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
						f0f3f13f1.MaxPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
						f0f3f13f1.SpotInstanceType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
						f0f3f13f1.ValidUntil = &metav1.Time{*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil}
					}
					f0f3f13.SpotOptions = f0f3f13f1
				}
				f0f3.InstanceMarketOptions = f0f3f13
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements != nil {
				f0f3f14 := &svcapitypes.InstanceRequirements{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
					f0f3f14f0 := &svcapitypes.AcceleratorCount{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
						f0f3f14f0.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
						f0f3f14f0.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min
					}
					f0f3f14.AcceleratorCount = f0f3f14f0
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
					f0f3f14f1 := []*string{}
					for _, f0f3f14f1iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
						var f0f3f14f1elem string
						f0f3f14f1elem = *f0f3f14f1iter
						f0f3f14f1 = append(f0f3f14f1, &f0f3f14f1elem)
					}
					f0f3f14.AcceleratorManufacturers = f0f3f14f1
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
					f0f3f14f2 := []*string{}
					for _, f0f3f14f2iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
						var f0f3f14f2elem string
						f0f3f14f2elem = *f0f3f14f2iter
						f0f3f14f2 = append(f0f3f14f2, &f0f3f14f2elem)
					}
					f0f3f14.AcceleratorNames = f0f3f14f2
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
					f0f3f14f3 := &svcapitypes.AcceleratorTotalMemoryMiB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
						f0f3f14f3.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
						f0f3f14f3.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
					}
					f0f3f14.AcceleratorTotalMemoryMiB = f0f3f14f3
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
					f0f3f14f4 := []*string{}
					for _, f0f3f14f4iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
						var f0f3f14f4elem string
						f0f3f14f4elem = *f0f3f14f4iter
						f0f3f14f4 = append(f0f3f14f4, &f0f3f14f4elem)
					}
					f0f3f14.AcceleratorTypes = f0f3f14f4
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal != nil {
					f0f3f14.BareMetal = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
					f0f3f14f6 := &svcapitypes.BaselineEBSBandwidthMbps{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
						f0f3f14f6.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
						f0f3f14f6.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min
					}
					f0f3f14.BaselineEBSBandwidthMbps = f0f3f14f6
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance != nil {
					f0f3f14.BurstablePerformance = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers != nil {
					f0f3f14f8 := []*string{}
					for _, f0f3f14f8iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers {
						var f0f3f14f8elem string
						f0f3f14f8elem = *f0f3f14f8iter
						f0f3f14f8 = append(f0f3f14f8, &f0f3f14f8elem)
					}
					f0f3f14.CPUManufacturers = f0f3f14f8
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
					f0f3f14f9 := []*string{}
					for _, f0f3f14f9iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes {
						var f0f3f14f9elem string
						f0f3f14f9elem = *f0f3f14f9iter
						f0f3f14f9 = append(f0f3f14f9, &f0f3f14f9elem)
					}
					f0f3f14.ExcludedInstanceTypes = f0f3f14f9
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
					f0f3f14f10 := []*string{}
					for _, f0f3f14f10iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
						var f0f3f14f10elem string
						f0f3f14f10elem = *f0f3f14f10iter
						f0f3f14f10 = append(f0f3f14f10, &f0f3f14f10elem)
					}
					f0f3f14.InstanceGenerations = f0f3f14f10
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage != nil {
					f0f3f14.LocalStorage = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
					f0f3f14f12 := []*string{}
					for _, f0f3f14f12iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
						var f0f3f14f12elem string
						f0f3f14f12elem = *f0f3f14f12iter
						f0f3f14f12 = append(f0f3f14f12, &f0f3f14f12elem)
					}
					f0f3f14.LocalStorageTypes = f0f3f14f12
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu != nil {
					f0f3f14f13 := &svcapitypes.MemoryGiBPerVCPU{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
						f0f3f14f13.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
						f0f3f14f13.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min
					}
					f0f3f14.MemoryGiBPerVCPU = f0f3f14f13
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
					f0f3f14f14 := &svcapitypes.MemoryMiB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
						f0f3f14f14.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
						f0f3f14f14.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min
					}
					f0f3f14.MemoryMiB = f0f3f14f14
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
					f0f3f14f15 := &svcapitypes.NetworkInterfaceCount{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
						f0f3f14f15.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
						f0f3f14f15.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min
					}
					f0f3f14.NetworkInterfaceCount = f0f3f14f15
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
					f0f3f14.OnDemandMaxPricePercentageOverLowestPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
					f0f3f14.RequireHibernateSupport = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
					f0f3f14.SpotMaxPricePercentageOverLowestPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
					f0f3f14f19 := &svcapitypes.TotalLocalStorageGB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
						f0f3f14f19.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
						f0f3f14f19.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min
					}
					f0f3f14.TotalLocalStorageGB = f0f3f14f19
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount != nil {
					f0f3f14f20 := &svcapitypes.VCPUCountRange{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max != nil {
						f0f3f14f20.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min != nil {
						f0f3f14f20.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min
					}
					f0f3f14.VCPUCount = f0f3f14f20
				}
				f0f3.InstanceRequirements = f0f3f14
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType != nil {
				f0f3.InstanceType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.KernelId != nil {
				f0f3.KernelID = resp.LaunchTemplateVersion.LaunchTemplateData.KernelId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.KeyName != nil {
				f0f3.KeyName = resp.LaunchTemplateVersion.LaunchTemplateData.KeyName
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications != nil {
				f0f3f18 := []*svcapitypes.LaunchTemplateLicenseConfiguration{}
				for _, f0f3f18iter := range resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications {
					f0f3f18elem := &svcapitypes.LaunchTemplateLicenseConfiguration{}
					if f0f3f18iter.LicenseConfigurationArn != nil {
						f0f3f18elem.LicenseConfigurationARN = f0f3f18iter.LicenseConfigurationArn
					}
					f0f3f18 = append(f0f3f18, f0f3f18elem)
				}
				f0f3.LicenseSpecifications = f0f3f18
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions != nil {
				f0f3f19 := &svcapitypes.LaunchTemplateInstanceMetadataOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint != nil {
					f0f3f19.HTTPEndpoint = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6 != nil {
					f0f3f19.HTTPProtocolIPv6 = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit != nil {
					f0f3f19.HTTPPutResponseHopLimit = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens != nil {
					f0f3f19.HTTPTokens = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State != nil {
					f0f3f19.State = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State
				}
				f0f3.MetadataOptions = f0f3f19
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring != nil {
				f0f3f20 := &svcapitypes.LaunchTemplatesMonitoring{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled != nil {
					f0f3f20.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled
				}
				f0f3.Monitoring = f0f3f20
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces != nil {
				f0f3f21 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecification{}
				for _, f0f3f21iter := range resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces {
					f0f3f21elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecification{}
					if f0f3f21iter.AssociateCarrierIpAddress != nil {
						f0f3f21elem.AssociateCarrierIPAddress = f0f3f21iter.AssociateCarrierIpAddress
					}
					if f0f3f21iter.AssociatePublicIpAddress != nil {
						f0f3f21elem.AssociatePublicIPAddress = f0f3f21iter.AssociatePublicIpAddress
					}
					if f0f3f21iter.DeleteOnTermination != nil {
						f0f3f21elem.DeleteOnTermination = f0f3f21iter.DeleteOnTermination
					}
					if f0f3f21iter.Description != nil {
						f0f3f21elem.Description = f0f3f21iter.Description
					}
					if f0f3f21iter.DeviceIndex != nil {
						f0f3f21elem.DeviceIndex = f0f3f21iter.DeviceIndex
					}
					if f0f3f21iter.Groups != nil {
						f0f3f21elemf5 := []*string{}
						for _, f0f3f21elemf5iter := range f0f3f21iter.Groups {
							var f0f3f21elemf5elem string
							f0f3f21elemf5elem = *f0f3f21elemf5iter
							f0f3f21elemf5 = append(f0f3f21elemf5, &f0f3f21elemf5elem)
						}
						f0f3f21elem.Groups = f0f3f21elemf5
					}
					if f0f3f21iter.InterfaceType != nil {
						f0f3f21elem.InterfaceType = f0f3f21iter.InterfaceType
					}
					if f0f3f21iter.Ipv4PrefixCount != nil {
						f0f3f21elem.IPv4PrefixCount = f0f3f21iter.Ipv4PrefixCount
					}
					if f0f3f21iter.Ipv4Prefixes != nil {
						f0f3f21elemf8 := []*svcapitypes.IPv4PrefixSpecificationResponse{}
						for _, f0f3f21elemf8iter := range f0f3f21iter.Ipv4Prefixes {
							f0f3f21elemf8elem := &svcapitypes.IPv4PrefixSpecificationResponse{}
							if f0f3f21elemf8iter.Ipv4Prefix != nil {
								f0f3f21elemf8elem.IPv4Prefix = f0f3f21elemf8iter.Ipv4Prefix
							}
							f0f3f21elemf8 = append(f0f3f21elemf8, f0f3f21elemf8elem)
						}
						f0f3f21elem.IPv4Prefixes = f0f3f21elemf8
					}
					if f0f3f21iter.Ipv6AddressCount != nil {
						f0f3f21elem.IPv6AddressCount = f0f3f21iter.Ipv6AddressCount
					}
					if f0f3f21iter.Ipv6Addresses != nil {
						f0f3f21elemf10 := []*svcapitypes.InstanceIPv6Address{}
						for _, f0f3f21elemf10iter := range f0f3f21iter.Ipv6Addresses {
							f0f3f21elemf10elem := &svcapitypes.InstanceIPv6Address{}
							if f0f3f21elemf10iter.Ipv6Address != nil {
								f0f3f21elemf10elem.IPv6Address = f0f3f21elemf10iter.Ipv6Address
							}
							f0f3f21elemf10 = append(f0f3f21elemf10, f0f3f21elemf10elem)
						}
						f0f3f21elem.IPv6Addresses = f0f3f21elemf10
					}
					if f0f3f21iter.Ipv6PrefixCount != nil {
						f0f3f21elem.IPv6PrefixCount = f0f3f21iter.Ipv6PrefixCount
					}
					if f0f3f21iter.Ipv6Prefixes != nil {
						f0f3f21elemf12 := []*svcapitypes.IPv6PrefixSpecificationResponse{}
						for _, f0f3f21elemf12iter := range f0f3f21iter.Ipv6Prefixes {
							f0f3f21elemf12elem := &svcapitypes.IPv6PrefixSpecificationResponse{}
							if f0f3f21elemf12iter.Ipv6Prefix != nil {
								f0f3f21elemf12elem.IPv6Prefix = f0f3f21elemf12iter.Ipv6Prefix
							}
							f0f3f21elemf12 = append(f0f3f21elemf12, f0f3f21elemf12elem)
						}
						f0f3f21elem.IPv6Prefixes = f0f3f21elemf12
					}
					if f0f3f21iter.NetworkCardIndex != nil {
						f0f3f21elem.NetworkCardIndex = f0f3f21iter.NetworkCardIndex
					}
					if f0f3f21iter.NetworkInterfaceId != nil {
						f0f3f21elem.NetworkInterfaceID = f0f3f21iter.NetworkInterfaceId
					}
					if f0f3f21iter.PrivateIpAddress != nil {
						f0f3f21elem.PrivateIPAddress = f0f3f21iter.PrivateIpAddress
					}
					if f0f3f21iter.PrivateIpAddresses != nil {
						f0f3f21elemf16 := []*svcapitypes.PrivateIPAddressSpecification{}
						for _, f0f3f21elemf16iter := range f0f3f21iter.PrivateIpAddresses {
							f0f3f21elemf16elem := &svcapitypes.PrivateIPAddressSpecification{}
							if f0f3f21elemf16iter.Primary != nil {
								f0f3f21elemf16elem.Primary = f0f3f21elemf16iter.Primary
							}
							if f0f3f21elemf16iter.PrivateIpAddress != nil {
								f0f3f21elemf16elem.PrivateIPAddress = f0f3f21elemf16iter.PrivateIpAddress
							}
							f0f3f21elemf16 = append(f0f3f21elemf16, f0f3f21elemf16elem)
						}
						f0f3f21elem.PrivateIPAddresses = f0f3f21elemf16
					}
					if f0f3f21iter.SecondaryPrivateIpAddressCount != nil {
						f0f3f21elem.SecondaryPrivateIPAddressCount = f0f3f21iter.SecondaryPrivateIpAddressCount
					}
					if f0f3f21iter.SubnetId != nil {
						f0f3f21elem.SubnetID = f0f3f21iter.SubnetId
					}
					f0f3f21 = append(f0f3f21, f0f3f21elem)
				}
				f0f3.NetworkInterfaces = f0f3f21
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement != nil {
				f0f3f22 := &svcapitypes.LaunchTemplatePlacement{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity != nil {
					f0f3f22.Affinity = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone != nil {
					f0f3f22.AvailabilityZone = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName != nil {
					f0f3f22.GroupName = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId != nil {
					f0f3f22.HostID = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn != nil {
					f0f3f22.HostResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber != nil {
					f0f3f22.PartitionNumber = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain != nil {
					f0f3f22.SpreadDomain = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy != nil {
					f0f3f22.Tenancy = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy
				}
				f0f3.Placement = f0f3f22
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId != nil {
				f0f3.RamDiskID = resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds != nil {
				f0f3f24 := []*string{}
				for _, f0f3f24iter := range resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds {
					var f0f3f24elem string
					f0f3f24elem = *f0f3f24iter
					f0f3f24 = append(f0f3f24, &f0f3f24elem)
				}
				f0f3.SecurityGroupIDs = f0f3f24
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups != nil {
				f0f3f25 := []*string{}
				for _, f0f3f25iter := range resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups {
					var f0f3f25elem string
					f0f3f25elem = *f0f3f25iter
					f0f3f25 = append(f0f3f25, &f0f3f25elem)
				}
				f0f3.SecurityGroups = f0f3f25
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications != nil {
				f0f3f26 := []*svcapitypes.LaunchTemplateTagSpecification{}
				for _, f0f3f26iter := range resp.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications {
					f0f3f26elem := &svcapitypes.LaunchTemplateTagSpecification{}
					if f0f3f26iter.ResourceType != nil {
						f0f3f26elem.ResourceType = f0f3f26iter.ResourceType
					}
					if f0f3f26iter.Tags != nil {
						f0f3f26elemf1 := []*svcapitypes.Tag{}
						for _, f0f3f26elemf1iter := range f0f3f26iter.Tags {
							f0f3f26elemf1elem := &svcapitypes.Tag{}
							if f0f3f26elemf1iter.Key != nil {
								f0f3f26elemf1elem.Key = f0f3f26elemf1iter.Key
							}
							if f0f3f26elemf1iter.Value != nil {
								f0f3f26elemf1elem.Value = f0f3f26elemf1iter.Value
							}
							f0f3f26elemf1 = append(f0f3f26elemf1, f0f3f26elemf1elem)
						}
						f0f3f26elem.Tags = f0f3f26elemf1
					}
					f0f3f26 = append(f0f3f26, f0f3f26elem)
				}
				f0f3.TagSpecifications = f0f3f26
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.UserData != nil {
				f0f3.UserData = resp.LaunchTemplateVersion.LaunchTemplateData.UserData
			}
			f0.LaunchTemplateData = f0f3
		}
		if resp.LaunchTemplateVersion.LaunchTemplateId != nil {
			f0.LaunchTemplateID = resp.LaunchTemplateVersion.LaunchTemplateId
		}
		if resp.LaunchTemplateVersion.LaunchTemplateName != nil {
			f0.LaunchTemplateName = resp.LaunchTemplateVersion.LaunchTemplateName
		}
		if resp.LaunchTemplateVersion.VersionDescription != nil {
			f0.VersionDescription = resp.LaunchTemplateVersion.VersionDescription
		}
		if resp.LaunchTemplateVersion.VersionNumber != nil {
			f0.VersionNumber = resp.LaunchTemplateVersion.VersionNumber
		}
		ko.Status.LaunchTemplateVersion = f0
	} else {
		ko.Status.LaunchTemplateVersion = nil
	}
	if resp.Warning != nil {
		f1 := &svcapitypes.ValidationWarning{}
		if resp.Warning.Errors != nil {
			f1f0 := []*svcapitypes.ValidationError{}
			for _, f1f0iter := range resp.Warning.Errors {
				f1f0elem := &svcapitypes.ValidationError{}
				if f1f0iter.Code != nil {
					f1f0elem.Code = f1f0iter.Code
				}
				if f1f0iter.Message != nil {
					f1f0elem.Message = f1f0iter.Message
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.Errors = f1f0
		}
		ko.Status.Warning = f1
	} else {
		ko.Status.Warning = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateLaunchTemplateVersionInput, error) {
	res := &svcsdk.CreateLaunchTemplateVersionInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.LaunchTemplateData != nil {
		f1 := &svcsdk.RequestLaunchTemplateData{}
		if r.ko.Spec.LaunchTemplateData.BlockDeviceMappings != nil {
			f1f0 := []*svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f1f0iter := range r.ko.Spec.LaunchTemplateData.BlockDeviceMappings {
				f1f0elem := &svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
				if f1f0iter.DeviceName != nil {
					f1f0elem.SetDeviceName(*f1f0iter.DeviceName)
				}
				if f1f0iter.EBS != nil {
					f1f0elemf1 := &svcsdk.LaunchTemplateEbsBlockDeviceRequest{}
					if f1f0iter.EBS.DeleteOnTermination != nil {
						f1f0elemf1.SetDeleteOnTermination(*f1f0iter.EBS.DeleteOnTermination)
					}
					if f1f0iter.EBS.Encrypted != nil {
						f1f0elemf1.SetEncrypted(*f1f0iter.EBS.Encrypted)
					}
					if f1f0iter.EBS.IOPS != nil {
						f1f0elemf1.SetIops(*f1f0iter.EBS.IOPS)
					}
					if f1f0iter.EBS.KMSKeyID != nil {
						f1f0elemf1.SetKmsKeyId(*f1f0iter.EBS.KMSKeyID)
					}
					if f1f0iter.EBS.SnapshotID != nil {
						f1f0elemf1.SetSnapshotId(*f1f0iter.EBS.SnapshotID)
					}
					if f1f0iter.EBS.Throughput != nil {
						f1f0elemf1.SetThroughput(*f1f0iter.EBS.Throughput)
					}
					if f1f0iter.EBS.VolumeSize != nil {
						f1f0elemf1.SetVolumeSize(*f1f0iter.EBS.VolumeSize)
					}
					if f1f0iter.EBS.VolumeType != nil {
						f1f0elemf1.SetVolumeType(*f1f0iter.EBS.VolumeType)
					}
					f1f0elem.SetEbs(f1f0elemf1)
				}
				if f1f0iter.NoDevice != nil {
					f1f0elem.SetNoDevice(*f1f0iter.NoDevice)
				}
				if f1f0iter.VirtualName != nil {
					f1f0elem.SetVirtualName(*f1f0iter.VirtualName)
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.SetBlockDeviceMappings(f1f0)
		}
		if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification != nil {
			f1f1 := &svcsdk.LaunchTemplateCapacityReservationSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f1f1.SetCapacityReservationPreference(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference)
			}
			if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f1f1f1 := &svcsdk.CapacityReservationTarget{}
				if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
					f1f1f1.SetCapacityReservationId(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID)
				}
				if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
					f1f1f1.SetCapacityReservationResourceGroupArn(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN)
				}
				f1f1.SetCapacityReservationTarget(f1f1f1)
			}
			f1.SetCapacityReservationSpecification(f1f1)
		}
		if r.ko.Spec.LaunchTemplateData.CPUOptions != nil {
			f1f2 := &svcsdk.LaunchTemplateCpuOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.CPUOptions.CoreCount != nil {
				f1f2.SetCoreCount(*r.ko.Spec.LaunchTemplateData.CPUOptions.CoreCount)
			}
			if r.ko.Spec.LaunchTemplateData.CPUOptions.ThreadsPerCore != nil {
				f1f2.SetThreadsPerCore(*r.ko.Spec.LaunchTemplateData.CPUOptions.ThreadsPerCore)
			}
			f1.SetCpuOptions(f1f2)
		}
		if r.ko.Spec.LaunchTemplateData.CreditSpecification != nil {
			f1f3 := &svcsdk.CreditSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.CreditSpecification.CPUCredits != nil {
				f1f3.SetCpuCredits(*r.ko.Spec.LaunchTemplateData.CreditSpecification.CPUCredits)
			}
			f1.SetCreditSpecification(f1f3)
		}
		if r.ko.Spec.LaunchTemplateData.DisableAPITermination != nil {
			f1.SetDisableApiTermination(*r.ko.Spec.LaunchTemplateData.DisableAPITermination)
		}
		if r.ko.Spec.LaunchTemplateData.EBSOptimized != nil {
			f1.SetEbsOptimized(*r.ko.Spec.LaunchTemplateData.EBSOptimized)
		}
		if r.ko.Spec.LaunchTemplateData.ElasticGPUSpecifications != nil {
			f1f6 := []*svcsdk.ElasticGpuSpecification{}
			for _, f1f6iter := range r.ko.Spec.LaunchTemplateData.ElasticGPUSpecifications {
				f1f6elem := &svcsdk.ElasticGpuSpecification{}
				if f1f6iter.Type != nil {
					f1f6elem.SetType(*f1f6iter.Type)
				}
				f1f6 = append(f1f6, f1f6elem)
			}
			f1.SetElasticGpuSpecifications(f1f6)
		}
		if r.ko.Spec.LaunchTemplateData.ElasticInferenceAccelerators != nil {
			f1f7 := []*svcsdk.LaunchTemplateElasticInferenceAccelerator{}
			for _, f1f7iter := range r.ko.Spec.LaunchTemplateData.ElasticInferenceAccelerators {
				f1f7elem := &svcsdk.LaunchTemplateElasticInferenceAccelerator{}
				if f1f7iter.Count != nil {
					f1f7elem.SetCount(*f1f7iter.Count)
				}
				if f1f7iter.Type != nil {
					f1f7elem.SetType(*f1f7iter.Type)
				}
				f1f7 = append(f1f7, f1f7elem)
			}
			f1.SetElasticInferenceAccelerators(f1f7)
		}
		if r.ko.Spec.LaunchTemplateData.EnclaveOptions != nil {
			f1f8 := &svcsdk.LaunchTemplateEnclaveOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.EnclaveOptions.Enabled != nil {
				f1f8.SetEnabled(*r.ko.Spec.LaunchTemplateData.EnclaveOptions.Enabled)
			}
			f1.SetEnclaveOptions(f1f8)
		}
		if r.ko.Spec.LaunchTemplateData.HibernationOptions != nil {
			f1f9 := &svcsdk.LaunchTemplateHibernationOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.HibernationOptions.Configured != nil {
				f1f9.SetConfigured(*r.ko.Spec.LaunchTemplateData.HibernationOptions.Configured)
			}
			f1.SetHibernationOptions(f1f9)
		}
		if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile != nil {
			f1f10 := &svcsdk.LaunchTemplateIamInstanceProfileSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.ARN != nil {
				f1f10.SetArn(*r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.ARN)
			}
			if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.Name != nil {
				f1f10.SetName(*r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.Name)
			}
			f1.SetIamInstanceProfile(f1f10)
		}
		if r.ko.Spec.LaunchTemplateData.ImageID != nil {
			f1.SetImageId(*r.ko.Spec.LaunchTemplateData.ImageID)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
			f1.SetInstanceInitiatedShutdownBehavior(*r.ko.Spec.LaunchTemplateData.InstanceInitiatedShutdownBehavior)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions != nil {
			f1f13 := &svcsdk.LaunchTemplateInstanceMarketOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
				f1f13.SetMarketType(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.MarketType)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
				f1f13f1 := &svcsdk.LaunchTemplateSpotMarketOptionsRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					f1f13f1.SetBlockDurationMinutes(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
					f1f13f1.SetInstanceInterruptionBehavior(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f1f13f1.SetMaxPrice(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
					f1f13f1.SetSpotInstanceType(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f1f13f1.SetValidUntil(r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil.Time)
				}
				f1f13.SetSpotOptions(f1f13f1)
			}
			f1.SetInstanceMarketOptions(f1f13)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceRequirements != nil {
			f1f14 := &svcsdk.InstanceRequirementsRequest{}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
				f1f14f0 := &svcsdk.AcceleratorCountRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
					f1f14f0.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
					f1f14f0.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min)
				}
				f1f14.SetAcceleratorCount(f1f14f0)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
				f1f14f1 := []*string{}
				for _, f1f14f1iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
					var f1f14f1elem string
					f1f14f1elem = *f1f14f1iter
					f1f14f1 = append(f1f14f1, &f1f14f1elem)
				}
				f1f14.SetAcceleratorManufacturers(f1f14f1)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
				f1f14f2 := []*string{}
				for _, f1f14f2iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
					var f1f14f2elem string
					f1f14f2elem = *f1f14f2iter
					f1f14f2 = append(f1f14f2, &f1f14f2elem)
				}
				f1f14.SetAcceleratorNames(f1f14f2)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
				f1f14f3 := &svcsdk.AcceleratorTotalMemoryMiBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
					f1f14f3.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
					f1f14f3.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
				}
				f1f14.SetAcceleratorTotalMemoryMiB(f1f14f3)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
				f1f14f4 := []*string{}
				for _, f1f14f4iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
					var f1f14f4elem string
					f1f14f4elem = *f1f14f4iter
					f1f14f4 = append(f1f14f4, &f1f14f4elem)
				}
				f1f14.SetAcceleratorTypes(f1f14f4)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BareMetal != nil {
				f1f14.SetBareMetal(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BareMetal)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
				f1f14f6 := &svcsdk.BaselineEbsBandwidthMbpsRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
					f1f14f6.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
					f1f14f6.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Min)
				}
				f1f14.SetBaselineEbsBandwidthMbps(f1f14f6)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BurstablePerformance != nil {
				f1f14.SetBurstablePerformance(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BurstablePerformance)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.CPUManufacturers != nil {
				f1f14f8 := []*string{}
				for _, f1f14f8iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.CPUManufacturers {
					var f1f14f8elem string
					f1f14f8elem = *f1f14f8iter
					f1f14f8 = append(f1f14f8, &f1f14f8elem)
				}
				f1f14.SetCpuManufacturers(f1f14f8)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
				f1f14f9 := []*string{}
				for _, f1f14f9iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes {
					var f1f14f9elem string
					f1f14f9elem = *f1f14f9iter
					f1f14f9 = append(f1f14f9, &f1f14f9elem)
				}
				f1f14.SetExcludedInstanceTypes(f1f14f9)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
				f1f14f10 := []*string{}
				for _, f1f14f10iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
					var f1f14f10elem string
					f1f14f10elem = *f1f14f10iter
					f1f14f10 = append(f1f14f10, &f1f14f10elem)
				}
				f1f14.SetInstanceGenerations(f1f14f10)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorage != nil {
				f1f14.SetLocalStorage(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorage)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
				f1f14f12 := []*string{}
				for _, f1f14f12iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
					var f1f14f12elem string
					f1f14f12elem = *f1f14f12iter
					f1f14f12 = append(f1f14f12, &f1f14f12elem)
				}
				f1f14.SetLocalStorageTypes(f1f14f12)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU != nil {
				f1f14f13 := &svcsdk.MemoryGiBPerVCpuRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
					f1f14f13.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
					f1f14f13.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Min)
				}
				f1f14.SetMemoryGiBPerVCpu(f1f14f13)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
				f1f14f14 := &svcsdk.MemoryMiBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
					f1f14f14.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
					f1f14f14.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min)
				}
				f1f14.SetMemoryMiB(f1f14f14)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
				f1f14f15 := &svcsdk.NetworkInterfaceCountRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
					f1f14f15.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
					f1f14f15.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min)
				}
				f1f14.SetNetworkInterfaceCount(f1f14f15)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
				f1f14.SetOnDemandMaxPricePercentageOverLowestPrice(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
				f1f14.SetRequireHibernateSupport(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
				f1f14.SetSpotMaxPricePercentageOverLowestPrice(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
				f1f14f19 := &svcsdk.TotalLocalStorageGBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
					f1f14f19.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
					f1f14f19.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min)
				}
				f1f14.SetTotalLocalStorageGB(f1f14f19)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount != nil {
				f1f14f20 := &svcsdk.VCpuCountRangeRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Max != nil {
					f1f14f20.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Min != nil {
					f1f14f20.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Min)
				}
				f1f14.SetVCpuCount(f1f14f20)
			}
			f1.SetInstanceRequirements(f1f14)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceType != nil {
			f1.SetInstanceType(*r.ko.Spec.LaunchTemplateData.InstanceType)
		}
		if r.ko.Spec.LaunchTemplateData.KernelID != nil {
			f1.SetKernelId(*r.ko.Spec.LaunchTemplateData.KernelID)
		}
		if r.ko.Spec.LaunchTemplateData.KeyName != nil {
			f1.SetKeyName(*r.ko.Spec.LaunchTemplateData.KeyName)
		}
		if r.ko.Spec.LaunchTemplateData.LicenseSpecifications != nil {
			f1f18 := []*svcsdk.LaunchTemplateLicenseConfigurationRequest{}
			for _, f1f18iter := range r.ko.Spec.LaunchTemplateData.LicenseSpecifications {
				f1f18elem := &svcsdk.LaunchTemplateLicenseConfigurationRequest{}
				if f1f18iter.LicenseConfigurationARN != nil {
					f1f18elem.SetLicenseConfigurationArn(*f1f18iter.LicenseConfigurationARN)
				}
				f1f18 = append(f1f18, f1f18elem)
			}
			f1.SetLicenseSpecifications(f1f18)
		}
		if r.ko.Spec.LaunchTemplateData.MetadataOptions != nil {
			f1f19 := &svcsdk.LaunchTemplateInstanceMetadataOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPEndpoint != nil {
				f1f19.SetHttpEndpoint(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPEndpoint)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPProtocolIPv6 != nil {
				f1f19.SetHttpProtocolIpv6(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPProtocolIPv6)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit != nil {
				f1f19.SetHttpPutResponseHopLimit(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPTokens != nil {
				f1f19.SetHttpTokens(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPTokens)
			}
			f1.SetMetadataOptions(f1f19)
		}
		if r.ko.Spec.LaunchTemplateData.Monitoring != nil {
			f1f20 := &svcsdk.LaunchTemplatesMonitoringRequest{}
			if r.ko.Spec.LaunchTemplateData.Monitoring.Enabled != nil {
				f1f20.SetEnabled(*r.ko.Spec.LaunchTemplateData.Monitoring.Enabled)
			}
			f1.SetMonitoring(f1f20)
		}
		if r.ko.Spec.LaunchTemplateData.NetworkInterfaces != nil {
			f1f21 := []*svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f1f21iter := range r.ko.Spec.LaunchTemplateData.NetworkInterfaces {
				f1f21elem := &svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f1f21iter.AssociateCarrierIPAddress != nil {
					f1f21elem.SetAssociateCarrierIpAddress(*f1f21iter.AssociateCarrierIPAddress)
				}
				if f1f21iter.AssociatePublicIPAddress != nil {
					f1f21elem.SetAssociatePublicIpAddress(*f1f21iter.AssociatePublicIPAddress)
				}
				if f1f21iter.DeleteOnTermination != nil {
					f1f21elem.SetDeleteOnTermination(*f1f21iter.DeleteOnTermination)
				}
				if f1f21iter.Description != nil {
					f1f21elem.SetDescription(*f1f21iter.Description)
				}
				if f1f21iter.DeviceIndex != nil {
					f1f21elem.SetDeviceIndex(*f1f21iter.DeviceIndex)
				}
				if f1f21iter.Groups != nil {
					f1f21elemf5 := []*string{}
					for _, f1f21elemf5iter := range f1f21iter.Groups {
						var f1f21elemf5elem string
						f1f21elemf5elem = *f1f21elemf5iter
						f1f21elemf5 = append(f1f21elemf5, &f1f21elemf5elem)
					}
					f1f21elem.SetGroups(f1f21elemf5)
				}
				if f1f21iter.InterfaceType != nil {
					f1f21elem.SetInterfaceType(*f1f21iter.InterfaceType)
				}
				if f1f21iter.IPv4PrefixCount != nil {
					f1f21elem.SetIpv4PrefixCount(*f1f21iter.IPv4PrefixCount)
				}
				if f1f21iter.IPv4Prefixes != nil {
					f1f21elemf8 := []*svcsdk.Ipv4PrefixSpecificationRequest{}
					for _, f1f21elemf8iter := range f1f21iter.IPv4Prefixes {
						f1f21elemf8elem := &svcsdk.Ipv4PrefixSpecificationRequest{}
						if f1f21elemf8iter.IPv4Prefix != nil {
							f1f21elemf8elem.SetIpv4Prefix(*f1f21elemf8iter.IPv4Prefix)
						}
						f1f21elemf8 = append(f1f21elemf8, f1f21elemf8elem)
					}
					f1f21elem.SetIpv4Prefixes(f1f21elemf8)
				}
				if f1f21iter.IPv6AddressCount != nil {
					f1f21elem.SetIpv6AddressCount(*f1f21iter.IPv6AddressCount)
				}
				if f1f21iter.IPv6Addresses != nil {
					f1f21elemf10 := []*svcsdk.InstanceIpv6AddressRequest{}
					for _, f1f21elemf10iter := range f1f21iter.IPv6Addresses {
						f1f21elemf10elem := &svcsdk.InstanceIpv6AddressRequest{}
						if f1f21elemf10iter.IPv6Address != nil {
							f1f21elemf10elem.SetIpv6Address(*f1f21elemf10iter.IPv6Address)
						}
						f1f21elemf10 = append(f1f21elemf10, f1f21elemf10elem)
					}
					f1f21elem.SetIpv6Addresses(f1f21elemf10)
				}
				if f1f21iter.IPv6PrefixCount != nil {
					f1f21elem.SetIpv6PrefixCount(*f1f21iter.IPv6PrefixCount)
				}
				if f1f21iter.IPv6Prefixes != nil {
					f1f21elemf12 := []*svcsdk.Ipv6PrefixSpecificationRequest{}
					for _, f1f21elemf12iter := range f1f21iter.IPv6Prefixes {
						f1f21elemf12elem := &svcsdk.Ipv6PrefixSpecificationRequest{}
						if f1f21elemf12iter.IPv6Prefix != nil {
							f1f21elemf12elem.SetIpv6Prefix(*f1f21elemf12iter.IPv6Prefix)
						}
						f1f21elemf12 = append(f1f21elemf12, f1f21elemf12elem)
					}
					f1f21elem.SetIpv6Prefixes(f1f21elemf12)
				}
				if f1f21iter.NetworkCardIndex != nil {
					f1f21elem.SetNetworkCardIndex(*f1f21iter.NetworkCardIndex)
				}
				if f1f21iter.NetworkInterfaceID != nil {
					f1f21elem.SetNetworkInterfaceId(*f1f21iter.NetworkInterfaceID)
				}
				if f1f21iter.PrivateIPAddress != nil {
					f1f21elem.SetPrivateIpAddress(*f1f21iter.PrivateIPAddress)
				}
				if f1f21iter.PrivateIPAddresses != nil {
					f1f21elemf16 := []*svcsdk.PrivateIpAddressSpecification{}
					for _, f1f21elemf16iter := range f1f21iter.PrivateIPAddresses {
						f1f21elemf16elem := &svcsdk.PrivateIpAddressSpecification{}
						if f1f21elemf16iter.Primary != nil {
							f1f21elemf16elem.SetPrimary(*f1f21elemf16iter.Primary)
						}
						if f1f21elemf16iter.PrivateIPAddress != nil {
							f1f21elemf16elem.SetPrivateIpAddress(*f1f21elemf16iter.PrivateIPAddress)
						}
						f1f21elemf16 = append(f1f21elemf16, f1f21elemf16elem)
					}
					f1f21elem.SetPrivateIpAddresses(f1f21elemf16)
				}
				if f1f21iter.SecondaryPrivateIPAddressCount != nil {
					f1f21elem.SetSecondaryPrivateIpAddressCount(*f1f21iter.SecondaryPrivateIPAddressCount)
				}
				if f1f21iter.SubnetID != nil {
					f1f21elem.SetSubnetId(*f1f21iter.SubnetID)
				}
				f1f21 = append(f1f21, f1f21elem)
			}
			f1.SetNetworkInterfaces(f1f21)
		}
		if r.ko.Spec.LaunchTemplateData.Placement != nil {
			f1f22 := &svcsdk.LaunchTemplatePlacementRequest{}
			if r.ko.Spec.LaunchTemplateData.Placement.Affinity != nil {
				f1f22.SetAffinity(*r.ko.Spec.LaunchTemplateData.Placement.Affinity)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.AvailabilityZone != nil {
				f1f22.SetAvailabilityZone(*r.ko.Spec.LaunchTemplateData.Placement.AvailabilityZone)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.GroupName != nil {
				f1f22.SetGroupName(*r.ko.Spec.LaunchTemplateData.Placement.GroupName)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.HostID != nil {
				f1f22.SetHostId(*r.ko.Spec.LaunchTemplateData.Placement.HostID)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.HostResourceGroupARN != nil {
				f1f22.SetHostResourceGroupArn(*r.ko.Spec.LaunchTemplateData.Placement.HostResourceGroupARN)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.PartitionNumber != nil {
				f1f22.SetPartitionNumber(*r.ko.Spec.LaunchTemplateData.Placement.PartitionNumber)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.SpreadDomain != nil {
				f1f22.SetSpreadDomain(*r.ko.Spec.LaunchTemplateData.Placement.SpreadDomain)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.Tenancy != nil {
				f1f22.SetTenancy(*r.ko.Spec.LaunchTemplateData.Placement.Tenancy)
			}
			f1.SetPlacement(f1f22)
		}
		if r.ko.Spec.LaunchTemplateData.RamDiskID != nil {
			f1.SetRamDiskId(*r.ko.Spec.LaunchTemplateData.RamDiskID)
		}
		if r.ko.Spec.LaunchTemplateData.SecurityGroupIDs != nil {
			f1f24 := []*string{}
			for _, f1f24iter := range r.ko.Spec.LaunchTemplateData.SecurityGroupIDs {
				var f1f24elem string
				f1f24elem = *f1f24iter
				f1f24 = append(f1f24, &f1f24elem)
			}
			f1.SetSecurityGroupIds(f1f24)
		}
		if r.ko.Spec.LaunchTemplateData.SecurityGroups != nil {
			f1f25 := []*string{}
			for _, f1f25iter := range r.ko.Spec.LaunchTemplateData.SecurityGroups {
				var f1f25elem string
				f1f25elem = *f1f25iter
				f1f25 = append(f1f25, &f1f25elem)
			}
			f1.SetSecurityGroups(f1f25)
		}
		if r.ko.Spec.LaunchTemplateData.TagSpecifications != nil {
			f1f26 := []*svcsdk.LaunchTemplateTagSpecificationRequest{}
			for _, f1f26iter := range r.ko.Spec.LaunchTemplateData.TagSpecifications {
				f1f26elem := &svcsdk.LaunchTemplateTagSpecificationRequest{}
				if f1f26iter.ResourceType != nil {
					f1f26elem.SetResourceType(*f1f26iter.ResourceType)
				}
				if f1f26iter.Tags != nil {
					f1f26elemf1 := []*svcsdk.Tag{}
					for _, f1f26elemf1iter := range f1f26iter.Tags {
						f1f26elemf1elem := &svcsdk.Tag{}
						if f1f26elemf1iter.Key != nil {
							f1f26elemf1elem.SetKey(*f1f26elemf1iter.Key)
						}
						if f1f26elemf1iter.Value != nil {
							f1f26elemf1elem.SetValue(*f1f26elemf1iter.Value)
						}
						f1f26elemf1 = append(f1f26elemf1, f1f26elemf1elem)
					}
					f1f26elem.SetTags(f1f26elemf1)
				}
				f1f26 = append(f1f26, f1f26elem)
			}
			f1.SetTagSpecifications(f1f26)
		}
		if r.ko.Spec.LaunchTemplateData.UserData != nil {
			f1.SetUserData(*r.ko.Spec.LaunchTemplateData.UserData)
		}
		res.SetLaunchTemplateData(f1)
	}
	if r.ko.Spec.LaunchTemplateID != nil {
		res.SetLaunchTemplateId(*r.ko.Spec.LaunchTemplateID)
	}
	if r.ko.Spec.LaunchTemplateName != nil {
		res.SetLaunchTemplateName(*r.ko.Spec.LaunchTemplateName)
	}
	if r.ko.Spec.SourceVersion != nil {
		res.SetSourceVersion(*r.ko.Spec.SourceVersion)
	}
	if r.ko.Spec.VersionDescription != nil {
		res.SetVersionDescription(*r.ko.Spec.VersionDescription)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	// TODO(jaypipes): Figure this out...
	return nil, nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.LaunchTemplateVersion,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
